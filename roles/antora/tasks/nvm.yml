---
# Node Version Manager
# https://github.com/nvm-sh/nvm
# nvm is a function, not an executable file.
# It is created using commands in a resource file ~/.bashrc.
# Shell must read the .bashrc file before running the command
#
# command alternatives
#
# start an interactive shell
# Tell bash to be interactive (-i) and run the command (-c).
#
# source ~/.bashrc && nvm -v
# Fine, as long as there is no check for non-interactive and exit.
#
# use become_flags
# There may be some luck to be had with "become_flags",
# but -i, -c and -l mean different things to sudo.
#
# copy NVM's settings to .bash_profile
# pointless, .bash_profile sources .bashrc.
# Use a login shell (-l), which tells bash to read .bash_profile.
#
# copy NVM's settings to Ansible tasks
# Set up the environment then run commands without fuss.
#
# what about PackageKit and command_not_found_handle?
# is that a risk?
#
- name: is nvm already installed?
  ansible.builtin.shell: 
    cmd: bash -i -c 'nvm -v'
  register: r_nvm
  ignore_errors: true
  changed_when: no

- name: Set boolean
  ansible.builtin.set_fact:
    nvm_installed: true
  when: r_nvm.rc == 0

- name: Display result
  ansible.builtin.debug:
    var: nvm_installed

# see
# https://github.com/nvm-sh/nvm?tab=readme-ov-file#install--update-script
- name: Install nvm
  ansible.builtin.shell: >
    curl -o- https://raw.githubusercontent.com/nvm-sh/nvm/{{ nvm_tag }}/install.sh | bash
  args:
    executable: /bin/bash
    chdir: "$HOME"
    creates: "$HOME/.nvm/nvm.sh"
  when: not nvm_installed
  changed_when: true
